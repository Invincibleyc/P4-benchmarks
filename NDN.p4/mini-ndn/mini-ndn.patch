diff --git a/bin/minindn b/bin/minindn
index fd38093..eb52133 100755
--- a/bin/minindn
+++ b/bin/minindn
@@ -1,3 +1,4 @@
+#!/usr/bin/env python
 # -*- Mode:python; c-file-style:"gnu"; indent-tabs-mode:nil -*- */
 #
 # Copyright (C) 2015 The University of Memphis,
@@ -69,6 +70,7 @@ from mininet.util import ipStr, ipParse
 from ndn import ExperimentManager
 from ndn.ndn_host import NdnHost, CpuLimitedNdnHost
 from ndn.conf_parser import parse_hosts, parse_switches, parse_links
+from ndn.p4_mininet import P4Switch
 
 import os.path, time
 import optparse
@@ -150,6 +152,12 @@ def parse_args():
     parser.add_option("--hr", action="store_true", dest="hr", default=False,
     help="--hr is used to turn on hyperbolic routing")
 
+    parser.add_option("--p4", action="store_true", dest="p4", default=False,
+    help="--p4 istantiates P4-compatible software switches in your topology")
+
+    parser.add_option("--p4-dir", action="store", dest="p4Dir", default="/usr/local/etc/mini-ndn/",
+    help="Specify the full path directory where the p4-related config files are searched for; the default is /usr/local/etc/mini-ndn/")
+
     parser.add_option("--list-experiments", action="callback", callback=printExperimentNames,
     help="Lists the names of all available experiments")
 
@@ -181,6 +189,8 @@ def parse_args():
     options.experimentName = args.experiment
     options.nFaces = args.faces
     options.hr = args.hr
+    options.p4 = args.p4
+    options.p4Dir = args.p4Dir
     options.isCliEnabled = args.isCliEnabled
     options.nPings = args.nPings
     options.testbed = args.testbed
@@ -203,11 +213,12 @@ def parse_args():
     return options
 
 class NdnTopo(Topo):
-    def __init__(self, conf_arq, workDir, **opts):
+    def __init__(self, conf_arq, workDir, p4_flag, **opts):
         Topo.__init__(self, **opts)
 
         global hosts_conf
         global links_conf
+        global switch_name
         hosts_conf = parse_hosts(conf_arq)
         switches_conf = parse_switches(conf_arq)
         links_conf = parse_links(conf_arq)
@@ -215,20 +226,34 @@ class NdnTopo(Topo):
         self.isTCLink = False
         self.isLimited = False
 
-        for host in hosts_conf:
-            if host.cpu != None and self.isLimited != True:
-                self.isLimited = True
-            self.addHost(host.name, app=host.app, params=host.uri_tuples, cpu=host.cpu,cores=host.cores,cache=host.cache, workdir=workDir)
-
-        for switch in switches_conf:
-            self.addSwitch(switch.name)
-
-        for link in links_conf:
-            if len(link.linkDict) == 0:
-                self.addLink(link.h1, link.h2)
-            else:
-                self.addLink(link.h1, link.h2, **link.linkDict)
-                self.isTCLink = True
+	if p4_flag :
+	  for switch in switches_conf:
+	    switch_name = switch.name
+            switch = self.addSwitch(switch.name)
+
+	    h = 1
+	    for host in hosts_conf:
+	      host = self.addHost(host.name,
+                                ip = "10.0.%d.10/24" % h,
+                                mac = '00:04:00:00:00:%02x' %h, params=host.uri_tuples, cpu=host.cpu,cores=host.cores,cache=host.cache, workdir=workDir)
+	      self.addLink(host, switch)
+	      h+=1
+
+	else :
+	  for host in hosts_conf:
+              if host.cpu != None and self.isLimited != True:
+                  self.isLimited = True
+	      self.addHost(host.name, app=host.app, params=host.uri_tuples, cpu=host.cpu,cores=host.cores,cache=host.cache, workdir=workDir)
+
+          for switch in switches_conf:
+              self.addSwitch(switch.name)
+
+          for link in links_conf:
+              if len(link.linkDict) == 0:
+                  self.addLink(link.h1, link.h2)
+              else:
+                  self.addLink(link.h1, link.h2, **link.linkDict)
+                  self.isTCLink = True
 
         info('Parse of ' + conf_arq + ' done.\n')
 
@@ -250,13 +275,17 @@ def execute(options):
 
     # Update nfd.conf file used by Mini-NDN to match the currently installed version of NFD
     nfdConfFile = "%s/nfd.conf" % install_dir
-    os.system("sudo cp /usr/local/etc/ndn/nfd.conf.sample %s" % nfdConfFile)
+    # I've issued a pull request to change this and they've opened an issue on redmine
+    # follows the commented old version that loads the template file and crashes in systems that do not support ipv6
+    # os.system("sudo cp /usr/local/etc/ndn/nfd.conf.sample %s" % nfdConfFile)
+    # follows the new version that uses the nfd config file which is installed on the host machine
+    os.system("sudo cp /usr/local/etc/ndn/nfd.conf %s" % nfdConfFile)
     os.system("sudo sed -i \'s|default_level [A-Z]*$|default_level $LOG_LEVEL|g\' %s" % nfdConfFile)
 
     if options.resultDir is not None:
         options.resultDir = createResultsDir(options.resultDir, options.nFaces, options.hr)
 
-    topo = NdnTopo(template_file, options.workDir)
+    topo = NdnTopo(template_file, options.workDir, options.p4)
 
     t = datetime.datetime.now()
 
@@ -266,6 +295,8 @@ def execute(options):
         net = Mininet(topo,host=NdnHost,link=TCLink)
     elif topo.isTCLink == False and topo.isLimited == True:
         net = Mininet(topo,host=CpuLimitedNdnHost)
+    elif options.p4 == True:
+	net = Mininet(topo,host=NdnHost, switch=P4Switch)
     else:
         net = Mininet(topo,host=NdnHost)
 
@@ -275,27 +306,52 @@ def execute(options):
 
     info('Setup time: ' + str(delta.seconds) + '\n')
 
-    net.start()
-
-    # Giving proper IPs to intf so neighbor nodes can communicate
-    # This is one way of giving connectivity, another way could be
-    # to insert a switch between each pair of neighbors
-    ndnNetBase = "1.0.0.0"
-    interfaces = []
-    for host in net.hosts:
-        for intf in host.intfList():
-            link = intf.link
-            node1, node2 = link.intf1.node, link.intf2.node
-
-            if node1 in net.switches or node2 in net.switches:
-                continue
-
-            if link.intf1 not in interfaces and link.intf2 not in interfaces:
-                interfaces.append(link.intf1)
-                interfaces.append(link.intf2)
-                node1.setIP(ipStr(ipParse(ndnNetBase) + 1) + '/30', intf=link.intf1)
-                node2.setIP(ipStr(ipParse(ndnNetBase) + 2) + '/30', intf=link.intf2)
-                ndnNetBase = ipStr(ipParse(ndnNetBase) + 4)
+    if options.p4 == False:
+      net.start()
+
+    if options.p4 == True :
+      switch = net.getNodeByName(switch_name)
+      switch.parseConfig(options.p4Dir + "/p4-switch.conf")
+      num_hosts = len(hosts_conf)
+      sw_mac = ["00:04:00:00:00:%02x" % n for n in xrange(num_hosts)]
+
+      sw_addr = ["10.0.%d.10" % n for n in xrange(num_hosts)]
+
+      i = 0
+      for h in net.hosts:
+	  # the following lines were meant to apply different settings according to then switch operational mode
+	  # I've not included this config params yet, so let's assume an l3 mode for the sake of this experiment
+          #if mode == "l2":
+          #    h.setDefaultRoute("dev eth0")
+          #else:
+	  # h.setARP(sw_addr[i], sw_mac[i]) # TODO: double check if we're using the same addresses
+          #h.setDefaultRoute("dev eth0 via %s" % sw_addr[i])
+          h.setDefaultRoute("dev eth0")
+	  h.p4_setting()
+          h.startNFD()
+	  i+=1
+      
+      net.start()
+    else:
+      # Giving proper IPs to intf so neighbor nodes can communicate
+      # This is one way of giving connectivity, another way could be
+      # to insert a switch between each pair of neighbors
+      ndnNetBase = "1.0.0.0"
+      interfaces = []
+      for host in net.hosts:
+          for intf in host.intfList():
+              link = intf.link
+              node1, node2 = link.intf1.node, link.intf2.node
+
+              if node1 in net.switches or node2 in net.switches:
+                  continue
+
+              if link.intf1 not in interfaces and link.intf2 not in interfaces:
+                  interfaces.append(link.intf1)
+                  interfaces.append(link.intf2)
+                  node1.setIP(ipStr(ipParse(ndnNetBase) + 1) + '/30', intf=link.intf1)
+                  node2.setIP(ipStr(ipParse(ndnNetBase) + 2) + '/30', intf=link.intf2)
+                  ndnNetBase = ipStr(ipParse(ndnNetBase) + 4)
 
     nodes = ""    # Used later to check prefix name in checkFIB
 
