#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Iface:
  def bm_mc_mgrp_create(self, cxt_id, mgrp):
    """
    Parameters:
     - cxt_id
     - mgrp
    """
    pass

  def bm_mc_mgrp_destroy(self, cxt_id, mgrp_handle):
    """
    Parameters:
     - cxt_id
     - mgrp_handle
    """
    pass

  def bm_mc_node_create(self, cxt_id, rid, port_map, lag_map):
    """
    Parameters:
     - cxt_id
     - rid
     - port_map
     - lag_map
    """
    pass

  def bm_mc_node_associate(self, cxt_id, mgrp_handle, l1_handle):
    """
    Parameters:
     - cxt_id
     - mgrp_handle
     - l1_handle
    """
    pass

  def bm_mc_node_dissociate(self, cxt_id, mgrp_handle, l1_handle):
    """
    Parameters:
     - cxt_id
     - mgrp_handle
     - l1_handle
    """
    pass

  def bm_mc_node_destroy(self, cxt_id, l1_handle):
    """
    Parameters:
     - cxt_id
     - l1_handle
    """
    pass

  def bm_mc_node_update(self, cxt_id, l1_handle, port_map, lag_map):
    """
    Parameters:
     - cxt_id
     - l1_handle
     - port_map
     - lag_map
    """
    pass

  def bm_mc_set_lag_membership(self, cxt_id, lag_index, port_map):
    """
    Parameters:
     - cxt_id
     - lag_index
     - port_map
    """
    pass

  def bm_mc_get_entries(self, cxt_id):
    """
    Parameters:
     - cxt_id
    """
    pass


class Client(Iface):
  def __init__(self, iprot, oprot=None):
    self._iprot = self._oprot = iprot
    if oprot is not None:
      self._oprot = oprot
    self._seqid = 0

  def bm_mc_mgrp_create(self, cxt_id, mgrp):
    """
    Parameters:
     - cxt_id
     - mgrp
    """
    self.send_bm_mc_mgrp_create(cxt_id, mgrp)
    return self.recv_bm_mc_mgrp_create()

  def send_bm_mc_mgrp_create(self, cxt_id, mgrp):
    self._oprot.writeMessageBegin('bm_mc_mgrp_create', TMessageType.CALL, self._seqid)
    args = bm_mc_mgrp_create_args()
    args.cxt_id = cxt_id
    args.mgrp = mgrp
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_bm_mc_mgrp_create(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = bm_mc_mgrp_create_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ouch is not None:
      raise result.ouch
    raise TApplicationException(TApplicationException.MISSING_RESULT, "bm_mc_mgrp_create failed: unknown result");

  def bm_mc_mgrp_destroy(self, cxt_id, mgrp_handle):
    """
    Parameters:
     - cxt_id
     - mgrp_handle
    """
    self.send_bm_mc_mgrp_destroy(cxt_id, mgrp_handle)
    self.recv_bm_mc_mgrp_destroy()

  def send_bm_mc_mgrp_destroy(self, cxt_id, mgrp_handle):
    self._oprot.writeMessageBegin('bm_mc_mgrp_destroy', TMessageType.CALL, self._seqid)
    args = bm_mc_mgrp_destroy_args()
    args.cxt_id = cxt_id
    args.mgrp_handle = mgrp_handle
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_bm_mc_mgrp_destroy(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = bm_mc_mgrp_destroy_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.ouch is not None:
      raise result.ouch
    return

  def bm_mc_node_create(self, cxt_id, rid, port_map, lag_map):
    """
    Parameters:
     - cxt_id
     - rid
     - port_map
     - lag_map
    """
    self.send_bm_mc_node_create(cxt_id, rid, port_map, lag_map)
    return self.recv_bm_mc_node_create()

  def send_bm_mc_node_create(self, cxt_id, rid, port_map, lag_map):
    self._oprot.writeMessageBegin('bm_mc_node_create', TMessageType.CALL, self._seqid)
    args = bm_mc_node_create_args()
    args.cxt_id = cxt_id
    args.rid = rid
    args.port_map = port_map
    args.lag_map = lag_map
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_bm_mc_node_create(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = bm_mc_node_create_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ouch is not None:
      raise result.ouch
    raise TApplicationException(TApplicationException.MISSING_RESULT, "bm_mc_node_create failed: unknown result");

  def bm_mc_node_associate(self, cxt_id, mgrp_handle, l1_handle):
    """
    Parameters:
     - cxt_id
     - mgrp_handle
     - l1_handle
    """
    self.send_bm_mc_node_associate(cxt_id, mgrp_handle, l1_handle)
    self.recv_bm_mc_node_associate()

  def send_bm_mc_node_associate(self, cxt_id, mgrp_handle, l1_handle):
    self._oprot.writeMessageBegin('bm_mc_node_associate', TMessageType.CALL, self._seqid)
    args = bm_mc_node_associate_args()
    args.cxt_id = cxt_id
    args.mgrp_handle = mgrp_handle
    args.l1_handle = l1_handle
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_bm_mc_node_associate(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = bm_mc_node_associate_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.ouch is not None:
      raise result.ouch
    return

  def bm_mc_node_dissociate(self, cxt_id, mgrp_handle, l1_handle):
    """
    Parameters:
     - cxt_id
     - mgrp_handle
     - l1_handle
    """
    self.send_bm_mc_node_dissociate(cxt_id, mgrp_handle, l1_handle)
    self.recv_bm_mc_node_dissociate()

  def send_bm_mc_node_dissociate(self, cxt_id, mgrp_handle, l1_handle):
    self._oprot.writeMessageBegin('bm_mc_node_dissociate', TMessageType.CALL, self._seqid)
    args = bm_mc_node_dissociate_args()
    args.cxt_id = cxt_id
    args.mgrp_handle = mgrp_handle
    args.l1_handle = l1_handle
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_bm_mc_node_dissociate(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = bm_mc_node_dissociate_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.ouch is not None:
      raise result.ouch
    return

  def bm_mc_node_destroy(self, cxt_id, l1_handle):
    """
    Parameters:
     - cxt_id
     - l1_handle
    """
    self.send_bm_mc_node_destroy(cxt_id, l1_handle)
    self.recv_bm_mc_node_destroy()

  def send_bm_mc_node_destroy(self, cxt_id, l1_handle):
    self._oprot.writeMessageBegin('bm_mc_node_destroy', TMessageType.CALL, self._seqid)
    args = bm_mc_node_destroy_args()
    args.cxt_id = cxt_id
    args.l1_handle = l1_handle
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_bm_mc_node_destroy(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = bm_mc_node_destroy_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.ouch is not None:
      raise result.ouch
    return

  def bm_mc_node_update(self, cxt_id, l1_handle, port_map, lag_map):
    """
    Parameters:
     - cxt_id
     - l1_handle
     - port_map
     - lag_map
    """
    self.send_bm_mc_node_update(cxt_id, l1_handle, port_map, lag_map)
    self.recv_bm_mc_node_update()

  def send_bm_mc_node_update(self, cxt_id, l1_handle, port_map, lag_map):
    self._oprot.writeMessageBegin('bm_mc_node_update', TMessageType.CALL, self._seqid)
    args = bm_mc_node_update_args()
    args.cxt_id = cxt_id
    args.l1_handle = l1_handle
    args.port_map = port_map
    args.lag_map = lag_map
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_bm_mc_node_update(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = bm_mc_node_update_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.ouch is not None:
      raise result.ouch
    return

  def bm_mc_set_lag_membership(self, cxt_id, lag_index, port_map):
    """
    Parameters:
     - cxt_id
     - lag_index
     - port_map
    """
    self.send_bm_mc_set_lag_membership(cxt_id, lag_index, port_map)
    self.recv_bm_mc_set_lag_membership()

  def send_bm_mc_set_lag_membership(self, cxt_id, lag_index, port_map):
    self._oprot.writeMessageBegin('bm_mc_set_lag_membership', TMessageType.CALL, self._seqid)
    args = bm_mc_set_lag_membership_args()
    args.cxt_id = cxt_id
    args.lag_index = lag_index
    args.port_map = port_map
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_bm_mc_set_lag_membership(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = bm_mc_set_lag_membership_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.ouch is not None:
      raise result.ouch
    return

  def bm_mc_get_entries(self, cxt_id):
    """
    Parameters:
     - cxt_id
    """
    self.send_bm_mc_get_entries(cxt_id)
    return self.recv_bm_mc_get_entries()

  def send_bm_mc_get_entries(self, cxt_id):
    self._oprot.writeMessageBegin('bm_mc_get_entries', TMessageType.CALL, self._seqid)
    args = bm_mc_get_entries_args()
    args.cxt_id = cxt_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_bm_mc_get_entries(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = bm_mc_get_entries_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ouch is not None:
      raise result.ouch
    raise TApplicationException(TApplicationException.MISSING_RESULT, "bm_mc_get_entries failed: unknown result");


class Processor(Iface, TProcessor):
  def __init__(self, handler):
    self._handler = handler
    self._processMap = {}
    self._processMap["bm_mc_mgrp_create"] = Processor.process_bm_mc_mgrp_create
    self._processMap["bm_mc_mgrp_destroy"] = Processor.process_bm_mc_mgrp_destroy
    self._processMap["bm_mc_node_create"] = Processor.process_bm_mc_node_create
    self._processMap["bm_mc_node_associate"] = Processor.process_bm_mc_node_associate
    self._processMap["bm_mc_node_dissociate"] = Processor.process_bm_mc_node_dissociate
    self._processMap["bm_mc_node_destroy"] = Processor.process_bm_mc_node_destroy
    self._processMap["bm_mc_node_update"] = Processor.process_bm_mc_node_update
    self._processMap["bm_mc_set_lag_membership"] = Processor.process_bm_mc_set_lag_membership
    self._processMap["bm_mc_get_entries"] = Processor.process_bm_mc_get_entries

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return
    else:
      self._processMap[name](self, seqid, iprot, oprot)
    return True

  def process_bm_mc_mgrp_create(self, seqid, iprot, oprot):
    args = bm_mc_mgrp_create_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = bm_mc_mgrp_create_result()
    try:
      result.success = self._handler.bm_mc_mgrp_create(args.cxt_id, args.mgrp)
    except InvalidMcOperation as ouch:
      result.ouch = ouch
    oprot.writeMessageBegin("bm_mc_mgrp_create", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_bm_mc_mgrp_destroy(self, seqid, iprot, oprot):
    args = bm_mc_mgrp_destroy_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = bm_mc_mgrp_destroy_result()
    try:
      self._handler.bm_mc_mgrp_destroy(args.cxt_id, args.mgrp_handle)
    except InvalidMcOperation as ouch:
      result.ouch = ouch
    oprot.writeMessageBegin("bm_mc_mgrp_destroy", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_bm_mc_node_create(self, seqid, iprot, oprot):
    args = bm_mc_node_create_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = bm_mc_node_create_result()
    try:
      result.success = self._handler.bm_mc_node_create(args.cxt_id, args.rid, args.port_map, args.lag_map)
    except InvalidMcOperation as ouch:
      result.ouch = ouch
    oprot.writeMessageBegin("bm_mc_node_create", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_bm_mc_node_associate(self, seqid, iprot, oprot):
    args = bm_mc_node_associate_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = bm_mc_node_associate_result()
    try:
      self._handler.bm_mc_node_associate(args.cxt_id, args.mgrp_handle, args.l1_handle)
    except InvalidMcOperation as ouch:
      result.ouch = ouch
    oprot.writeMessageBegin("bm_mc_node_associate", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_bm_mc_node_dissociate(self, seqid, iprot, oprot):
    args = bm_mc_node_dissociate_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = bm_mc_node_dissociate_result()
    try:
      self._handler.bm_mc_node_dissociate(args.cxt_id, args.mgrp_handle, args.l1_handle)
    except InvalidMcOperation as ouch:
      result.ouch = ouch
    oprot.writeMessageBegin("bm_mc_node_dissociate", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_bm_mc_node_destroy(self, seqid, iprot, oprot):
    args = bm_mc_node_destroy_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = bm_mc_node_destroy_result()
    try:
      self._handler.bm_mc_node_destroy(args.cxt_id, args.l1_handle)
    except InvalidMcOperation as ouch:
      result.ouch = ouch
    oprot.writeMessageBegin("bm_mc_node_destroy", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_bm_mc_node_update(self, seqid, iprot, oprot):
    args = bm_mc_node_update_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = bm_mc_node_update_result()
    try:
      self._handler.bm_mc_node_update(args.cxt_id, args.l1_handle, args.port_map, args.lag_map)
    except InvalidMcOperation as ouch:
      result.ouch = ouch
    oprot.writeMessageBegin("bm_mc_node_update", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_bm_mc_set_lag_membership(self, seqid, iprot, oprot):
    args = bm_mc_set_lag_membership_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = bm_mc_set_lag_membership_result()
    try:
      self._handler.bm_mc_set_lag_membership(args.cxt_id, args.lag_index, args.port_map)
    except InvalidMcOperation as ouch:
      result.ouch = ouch
    oprot.writeMessageBegin("bm_mc_set_lag_membership", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_bm_mc_get_entries(self, seqid, iprot, oprot):
    args = bm_mc_get_entries_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = bm_mc_get_entries_result()
    try:
      result.success = self._handler.bm_mc_get_entries(args.cxt_id)
    except InvalidMcOperation as ouch:
      result.ouch = ouch
    oprot.writeMessageBegin("bm_mc_get_entries", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class bm_mc_mgrp_create_args:
  """
  Attributes:
   - cxt_id
   - mgrp
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'cxt_id', None, None, ), # 1
    (2, TType.I32, 'mgrp', None, None, ), # 2
  )

  def __init__(self, cxt_id=None, mgrp=None,):
    self.cxt_id = cxt_id
    self.mgrp = mgrp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.cxt_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.mgrp = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('bm_mc_mgrp_create_args')
    if self.cxt_id is not None:
      oprot.writeFieldBegin('cxt_id', TType.I32, 1)
      oprot.writeI32(self.cxt_id)
      oprot.writeFieldEnd()
    if self.mgrp is not None:
      oprot.writeFieldBegin('mgrp', TType.I32, 2)
      oprot.writeI32(self.mgrp)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.cxt_id)
    value = (value * 31) ^ hash(self.mgrp)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class bm_mc_mgrp_create_result:
  """
  Attributes:
   - success
   - ouch
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ouch', (InvalidMcOperation, InvalidMcOperation.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, ouch=None,):
    self.success = success
    self.ouch = ouch

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ouch = InvalidMcOperation()
          self.ouch.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('bm_mc_mgrp_create_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    if self.ouch is not None:
      oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
      self.ouch.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ouch)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class bm_mc_mgrp_destroy_args:
  """
  Attributes:
   - cxt_id
   - mgrp_handle
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'cxt_id', None, None, ), # 1
    (2, TType.I32, 'mgrp_handle', None, None, ), # 2
  )

  def __init__(self, cxt_id=None, mgrp_handle=None,):
    self.cxt_id = cxt_id
    self.mgrp_handle = mgrp_handle

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.cxt_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.mgrp_handle = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('bm_mc_mgrp_destroy_args')
    if self.cxt_id is not None:
      oprot.writeFieldBegin('cxt_id', TType.I32, 1)
      oprot.writeI32(self.cxt_id)
      oprot.writeFieldEnd()
    if self.mgrp_handle is not None:
      oprot.writeFieldBegin('mgrp_handle', TType.I32, 2)
      oprot.writeI32(self.mgrp_handle)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.cxt_id)
    value = (value * 31) ^ hash(self.mgrp_handle)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class bm_mc_mgrp_destroy_result:
  """
  Attributes:
   - ouch
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'ouch', (InvalidMcOperation, InvalidMcOperation.thrift_spec), None, ), # 1
  )

  def __init__(self, ouch=None,):
    self.ouch = ouch

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.ouch = InvalidMcOperation()
          self.ouch.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('bm_mc_mgrp_destroy_result')
    if self.ouch is not None:
      oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
      self.ouch.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.ouch)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class bm_mc_node_create_args:
  """
  Attributes:
   - cxt_id
   - rid
   - port_map
   - lag_map
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'cxt_id', None, None, ), # 1
    (2, TType.I32, 'rid', None, None, ), # 2
    (3, TType.STRING, 'port_map', None, None, ), # 3
    (4, TType.STRING, 'lag_map', None, None, ), # 4
  )

  def __init__(self, cxt_id=None, rid=None, port_map=None, lag_map=None,):
    self.cxt_id = cxt_id
    self.rid = rid
    self.port_map = port_map
    self.lag_map = lag_map

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.cxt_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.rid = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.port_map = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.lag_map = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('bm_mc_node_create_args')
    if self.cxt_id is not None:
      oprot.writeFieldBegin('cxt_id', TType.I32, 1)
      oprot.writeI32(self.cxt_id)
      oprot.writeFieldEnd()
    if self.rid is not None:
      oprot.writeFieldBegin('rid', TType.I32, 2)
      oprot.writeI32(self.rid)
      oprot.writeFieldEnd()
    if self.port_map is not None:
      oprot.writeFieldBegin('port_map', TType.STRING, 3)
      oprot.writeString(self.port_map)
      oprot.writeFieldEnd()
    if self.lag_map is not None:
      oprot.writeFieldBegin('lag_map', TType.STRING, 4)
      oprot.writeString(self.lag_map)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.cxt_id)
    value = (value * 31) ^ hash(self.rid)
    value = (value * 31) ^ hash(self.port_map)
    value = (value * 31) ^ hash(self.lag_map)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class bm_mc_node_create_result:
  """
  Attributes:
   - success
   - ouch
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ouch', (InvalidMcOperation, InvalidMcOperation.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, ouch=None,):
    self.success = success
    self.ouch = ouch

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ouch = InvalidMcOperation()
          self.ouch.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('bm_mc_node_create_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    if self.ouch is not None:
      oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
      self.ouch.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ouch)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class bm_mc_node_associate_args:
  """
  Attributes:
   - cxt_id
   - mgrp_handle
   - l1_handle
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'cxt_id', None, None, ), # 1
    (2, TType.I32, 'mgrp_handle', None, None, ), # 2
    (3, TType.I32, 'l1_handle', None, None, ), # 3
  )

  def __init__(self, cxt_id=None, mgrp_handle=None, l1_handle=None,):
    self.cxt_id = cxt_id
    self.mgrp_handle = mgrp_handle
    self.l1_handle = l1_handle

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.cxt_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.mgrp_handle = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.l1_handle = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('bm_mc_node_associate_args')
    if self.cxt_id is not None:
      oprot.writeFieldBegin('cxt_id', TType.I32, 1)
      oprot.writeI32(self.cxt_id)
      oprot.writeFieldEnd()
    if self.mgrp_handle is not None:
      oprot.writeFieldBegin('mgrp_handle', TType.I32, 2)
      oprot.writeI32(self.mgrp_handle)
      oprot.writeFieldEnd()
    if self.l1_handle is not None:
      oprot.writeFieldBegin('l1_handle', TType.I32, 3)
      oprot.writeI32(self.l1_handle)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.cxt_id)
    value = (value * 31) ^ hash(self.mgrp_handle)
    value = (value * 31) ^ hash(self.l1_handle)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class bm_mc_node_associate_result:
  """
  Attributes:
   - ouch
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'ouch', (InvalidMcOperation, InvalidMcOperation.thrift_spec), None, ), # 1
  )

  def __init__(self, ouch=None,):
    self.ouch = ouch

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.ouch = InvalidMcOperation()
          self.ouch.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('bm_mc_node_associate_result')
    if self.ouch is not None:
      oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
      self.ouch.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.ouch)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class bm_mc_node_dissociate_args:
  """
  Attributes:
   - cxt_id
   - mgrp_handle
   - l1_handle
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'cxt_id', None, None, ), # 1
    (2, TType.I32, 'mgrp_handle', None, None, ), # 2
    (3, TType.I32, 'l1_handle', None, None, ), # 3
  )

  def __init__(self, cxt_id=None, mgrp_handle=None, l1_handle=None,):
    self.cxt_id = cxt_id
    self.mgrp_handle = mgrp_handle
    self.l1_handle = l1_handle

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.cxt_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.mgrp_handle = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.l1_handle = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('bm_mc_node_dissociate_args')
    if self.cxt_id is not None:
      oprot.writeFieldBegin('cxt_id', TType.I32, 1)
      oprot.writeI32(self.cxt_id)
      oprot.writeFieldEnd()
    if self.mgrp_handle is not None:
      oprot.writeFieldBegin('mgrp_handle', TType.I32, 2)
      oprot.writeI32(self.mgrp_handle)
      oprot.writeFieldEnd()
    if self.l1_handle is not None:
      oprot.writeFieldBegin('l1_handle', TType.I32, 3)
      oprot.writeI32(self.l1_handle)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.cxt_id)
    value = (value * 31) ^ hash(self.mgrp_handle)
    value = (value * 31) ^ hash(self.l1_handle)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class bm_mc_node_dissociate_result:
  """
  Attributes:
   - ouch
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'ouch', (InvalidMcOperation, InvalidMcOperation.thrift_spec), None, ), # 1
  )

  def __init__(self, ouch=None,):
    self.ouch = ouch

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.ouch = InvalidMcOperation()
          self.ouch.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('bm_mc_node_dissociate_result')
    if self.ouch is not None:
      oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
      self.ouch.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.ouch)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class bm_mc_node_destroy_args:
  """
  Attributes:
   - cxt_id
   - l1_handle
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'cxt_id', None, None, ), # 1
    (2, TType.I32, 'l1_handle', None, None, ), # 2
  )

  def __init__(self, cxt_id=None, l1_handle=None,):
    self.cxt_id = cxt_id
    self.l1_handle = l1_handle

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.cxt_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.l1_handle = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('bm_mc_node_destroy_args')
    if self.cxt_id is not None:
      oprot.writeFieldBegin('cxt_id', TType.I32, 1)
      oprot.writeI32(self.cxt_id)
      oprot.writeFieldEnd()
    if self.l1_handle is not None:
      oprot.writeFieldBegin('l1_handle', TType.I32, 2)
      oprot.writeI32(self.l1_handle)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.cxt_id)
    value = (value * 31) ^ hash(self.l1_handle)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class bm_mc_node_destroy_result:
  """
  Attributes:
   - ouch
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'ouch', (InvalidMcOperation, InvalidMcOperation.thrift_spec), None, ), # 1
  )

  def __init__(self, ouch=None,):
    self.ouch = ouch

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.ouch = InvalidMcOperation()
          self.ouch.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('bm_mc_node_destroy_result')
    if self.ouch is not None:
      oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
      self.ouch.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.ouch)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class bm_mc_node_update_args:
  """
  Attributes:
   - cxt_id
   - l1_handle
   - port_map
   - lag_map
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'cxt_id', None, None, ), # 1
    (2, TType.I32, 'l1_handle', None, None, ), # 2
    (3, TType.STRING, 'port_map', None, None, ), # 3
    (4, TType.STRING, 'lag_map', None, None, ), # 4
  )

  def __init__(self, cxt_id=None, l1_handle=None, port_map=None, lag_map=None,):
    self.cxt_id = cxt_id
    self.l1_handle = l1_handle
    self.port_map = port_map
    self.lag_map = lag_map

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.cxt_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.l1_handle = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.port_map = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.lag_map = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('bm_mc_node_update_args')
    if self.cxt_id is not None:
      oprot.writeFieldBegin('cxt_id', TType.I32, 1)
      oprot.writeI32(self.cxt_id)
      oprot.writeFieldEnd()
    if self.l1_handle is not None:
      oprot.writeFieldBegin('l1_handle', TType.I32, 2)
      oprot.writeI32(self.l1_handle)
      oprot.writeFieldEnd()
    if self.port_map is not None:
      oprot.writeFieldBegin('port_map', TType.STRING, 3)
      oprot.writeString(self.port_map)
      oprot.writeFieldEnd()
    if self.lag_map is not None:
      oprot.writeFieldBegin('lag_map', TType.STRING, 4)
      oprot.writeString(self.lag_map)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.cxt_id)
    value = (value * 31) ^ hash(self.l1_handle)
    value = (value * 31) ^ hash(self.port_map)
    value = (value * 31) ^ hash(self.lag_map)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class bm_mc_node_update_result:
  """
  Attributes:
   - ouch
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'ouch', (InvalidMcOperation, InvalidMcOperation.thrift_spec), None, ), # 1
  )

  def __init__(self, ouch=None,):
    self.ouch = ouch

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.ouch = InvalidMcOperation()
          self.ouch.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('bm_mc_node_update_result')
    if self.ouch is not None:
      oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
      self.ouch.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.ouch)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class bm_mc_set_lag_membership_args:
  """
  Attributes:
   - cxt_id
   - lag_index
   - port_map
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'cxt_id', None, None, ), # 1
    (2, TType.I16, 'lag_index', None, None, ), # 2
    (3, TType.STRING, 'port_map', None, None, ), # 3
  )

  def __init__(self, cxt_id=None, lag_index=None, port_map=None,):
    self.cxt_id = cxt_id
    self.lag_index = lag_index
    self.port_map = port_map

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.cxt_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I16:
          self.lag_index = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.port_map = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('bm_mc_set_lag_membership_args')
    if self.cxt_id is not None:
      oprot.writeFieldBegin('cxt_id', TType.I32, 1)
      oprot.writeI32(self.cxt_id)
      oprot.writeFieldEnd()
    if self.lag_index is not None:
      oprot.writeFieldBegin('lag_index', TType.I16, 2)
      oprot.writeI16(self.lag_index)
      oprot.writeFieldEnd()
    if self.port_map is not None:
      oprot.writeFieldBegin('port_map', TType.STRING, 3)
      oprot.writeString(self.port_map)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.cxt_id)
    value = (value * 31) ^ hash(self.lag_index)
    value = (value * 31) ^ hash(self.port_map)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class bm_mc_set_lag_membership_result:
  """
  Attributes:
   - ouch
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'ouch', (InvalidMcOperation, InvalidMcOperation.thrift_spec), None, ), # 1
  )

  def __init__(self, ouch=None,):
    self.ouch = ouch

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.ouch = InvalidMcOperation()
          self.ouch.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('bm_mc_set_lag_membership_result')
    if self.ouch is not None:
      oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
      self.ouch.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.ouch)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class bm_mc_get_entries_args:
  """
  Attributes:
   - cxt_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'cxt_id', None, None, ), # 1
  )

  def __init__(self, cxt_id=None,):
    self.cxt_id = cxt_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.cxt_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('bm_mc_get_entries_args')
    if self.cxt_id is not None:
      oprot.writeFieldBegin('cxt_id', TType.I32, 1)
      oprot.writeI32(self.cxt_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.cxt_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class bm_mc_get_entries_result:
  """
  Attributes:
   - success
   - ouch
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ouch', (InvalidMcOperation, InvalidMcOperation.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, ouch=None,):
    self.success = success
    self.ouch = ouch

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ouch = InvalidMcOperation()
          self.ouch.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('bm_mc_get_entries_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    if self.ouch is not None:
      oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
      self.ouch.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ouch)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
