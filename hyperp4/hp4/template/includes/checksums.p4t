[+ std_header +]
[+ this_header +]

action a_ipv4_csum16(rshift_base) {
  modify_field(csum.sum, 0);
  modify_field(csum.rshift, rshift_base);
  // dst low
  modify_field(csum.sum, ((extracted.data >> csum.rshift) & 0xFFFF));
  modify_field(csum.rshift, csum.rshift + 16);
  // dst high
  modify_field(csum.sum, csum.sum + ((extracted.data >> csum.rshift) & 0xFFFF));
  modify_field(csum.rshift, csum.rshift + 16);
  // src low
  modify_field(csum.sum, csum.sum + ((extracted.data >> csum.rshift) & 0xFFFF));
  modify_field(csum.rshift, csum.rshift + 16);
  // src high
  modify_field(csum.sum, csum.sum + ((extracted.data >> csum.rshift) & 0xFFFF));
  modify_field(csum.rshift, csum.rshift + 16);
  // skip csum
  modify_field(csum.rshift, csum.rshift + 16);
  // TTL+protocol
  modify_field(csum.sum, csum.sum + ((extracted.data >> csum.rshift) & 0xFFFF));
  modify_field(csum.rshift, csum.rshift + 16);
  // flags+frag offset
  modify_field(csum.sum, csum.sum + ((extracted.data >> csum.rshift) & 0xFFFF));
  modify_field(csum.rshift, csum.rshift + 16);
  // ID
  modify_field(csum.sum, csum.sum + ((extracted.data >> csum.rshift) & 0xFFFF));
  modify_field(csum.rshift, csum.rshift + 16);
  // totalLen
  modify_field(csum.sum, csum.sum + ((extracted.data >> csum.rshift) & 0xFFFF));
  modify_field(csum.rshift, csum.rshift + 16);
  // version+IHL+DSCP
  modify_field(csum.sum, csum.sum + ((extracted.data >> csum.rshift) & 0xFFFF));
  
  // add carry
  modify_field(csum.sum, (csum.sum + (csum.sum >> 16)) & 0xFFFF);

  // invert and store
  modify_field(csum.final, ~csum.sum);

  modify_field(csum.csmask, 0xFFFF << (rshift_base + 64));
  modify_field(extracted.data, (extracted.data & ~csum.csmask) | ((csum.final << (rshift_base + 64)) & csum.csmask));
}

table t_checksum {
  reads {
    meta_ctrl.vdev_ID : exact;
    extracted.validbits : ternary;
  }
  actions {
    a_ipv4_csum16;
    _no_op;
  }
}
