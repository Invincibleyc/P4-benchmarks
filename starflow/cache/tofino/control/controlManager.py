#!/usr/bin/env python
"""
The main control application. Run this. 
"""
import time, select, sys, os, re, importlib, logging, unittest, binascii, logging, json, select, signal, math, argparse

# append path of common control modules.
sys.path.append(os.path.dirname(os.environ['PROGPATH'])+"/modules/control")


# get all the autogenerated thrift stuff.
if (os.environ['PROGNAME'] == ""):
    print("PROGNAME environment variable not set! Please run set_sde.bash")
    exit()
from switchThriftInterface import *

# base control plane manager with functions to add rules, multicast groups, bring up ports, etc.
from controlManagerBase import *

# logical network topology.
from topoConfig import *

# function specific controllers.
from forwardControllerL2 import *
# from latencyMonitorController import *

from starFlowController import *

mgr = None
DEBUG_PORT=144
DEBUG_MIRROR_ID=90

def main():
    global mgr
    if (not args.SIMULATION):
        ports, switches = topologySetup()

    # manager configuration flags. 
    if (not args.SIMULATION):
        portMapFile = os.environ['PROGPATH']+"/config/"+"portMap.json"
        activePorts = [p.getTuple() for p in ports.values()]
        # activePorts = [("1/0", "100G", "RS"), ("2/0", "100G", "RS")]
    else:
        portMapFile = os.environ['PROGPATH']+"/config/"+"simPortMap.json"
        activePorts = [] # ignored in simulation. 

    # initialize control manager.
    mgr = ControlManager([os.environ['PROGNAME']], [], port_map_filename=portMapFile, simulatorMode=args.SIMULATION, activePorts=activePorts)
    mgr.start()

    if (not args.SIMULATION):
        mgr.setPortMap()

    # add mirror session to collector / debugger.

    # get the DPIDs of the ports from the manager.
    if (not args.SIMULATION):
        setPortsDpid(mgr, ports.values())

    # L2 forwarding config.
    if (not args.SIMULATION):
        l2Module = mgr.startModule(ForwardControllerL2((mgr)))
        l2Module.installVswitchRules(switches[1])
        l2Module.installVswitchRules(switches[2])

    # fragmenter controller.
    starFlowModule = mgr.startModule(StarFlowController(mgr, args.SIMULATION))

    # write a log for the benefit of remote processes
    if (not args.SIMULATION):
        open("startupAlert.log", "w").write("STARTUP COMPLETE")
    print("STARTUP COMPLETE")
    print('Press Ctrl+C or hang up to exit.')
    signal.pause()


class ControlManager(ControlManagerBase):
    def __init__(self, p4_names, p4_prefixes, port_map_filename, simulatorMode, activePorts):
        ControlManagerBase.__init__(self, p4_names, p4_prefixes, port_map_filename, simulatorMode, activePorts)    


def topologySetup():
    """
    Setup the topology. This could be cleaner.
    """
    # ports = {i:Port(i, "%s/0"%i, "100G", "RS") for i in range(1, 7)}
    # up all the ports to tclust servers, and in-network hops, @ 10G
    # ports = {i:Port(i, "%s/0"%i, "10G", "NONE") for i in range(1, 9)}
    ports = {i:Port(i, "%s/0"%i, "100G", "RS") for i in range(1, 9)}
    ports[14] = Port(14, "14/0", "100G", "RS")
    # tclust servers on fp ports 1 ... N
    macs = {1:"24:8a:07:8f:eb:41", 2:"24:8a:07:5b:15:35", 3:"7c:fe:90:1c:36:d1", 4:"7c:fe:90:1c:36:81"}
    endHosts = {i:Host(i, "tclust%s"%i, ports[i], macs[i], "10.1.2.%s"%i) for i in range(1, 5)}

    # link between vswitches.
    links = {1:Link(1, ports[7], ports[8])}

    # vswitches. 
    switches = {i:Vswitch(i) for i in range(1, 3)}

    # 2 hosts on each switch.
    switches[1].addHost(endHosts[1])    
    switches[1].addHost(endHosts[3])    
    switches[2].addHost(endHosts[2])    
    switches[2].addHost(endHosts[4])    

    # uplinks.
    switches[1].addUplink(links[1], 0)
    switches[2].addUplink(links[1], 1)
    return ports, switches


# exit handler
def signal_handler(signal, frame):
        print('Exiting.')
        mgr.cleanupModules()
        if (not args.SIMULATION):
            mgr.clearPortMap()
        mgr.end()
        if (not args.SIMULATION):
            os.remove("startupAlert.log")
        sys.exit(0)
signal.signal(signal.SIGINT, signal_handler)
signal.signal(signal.SIGHUP, signal_handler)

# args.
# K, H, loss rate.
parser = argparse.ArgumentParser(description='Parse input arguments')
parser.add_argument('-hw', '--hardware', dest='SIMULATION', action='store_false', help='Run in hardware', default=True)
# parser.add_argument('--lossRate', '-l', type=float,dest="lossRate",help='Loss rate. Default: 0.0', default=0.0)
args = parser.parse_args()
print args


if __name__ == '__main__':
    print ("controller starting..")
    main()