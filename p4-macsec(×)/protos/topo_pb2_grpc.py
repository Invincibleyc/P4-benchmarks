# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import topo_pb2 as topo__pb2


class TopoServiceStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.updateTopo = channel.unary_unary(
        '/TopoService/updateTopo',
        request_serializer=topo__pb2.topo.SerializeToString,
        response_deserializer=topo__pb2.status.FromString,
        )
    self.registerController = channel.unary_unary(
        '/TopoService/registerController',
        request_serializer=topo__pb2.controller.SerializeToString,
        response_deserializer=topo__pb2.registerID.FromString,
        )


class TopoServiceServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def updateTopo(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def registerController(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_TopoServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'updateTopo': grpc.unary_unary_rpc_method_handler(
          servicer.updateTopo,
          request_deserializer=topo__pb2.topo.FromString,
          response_serializer=topo__pb2.status.SerializeToString,
      ),
      'registerController': grpc.unary_unary_rpc_method_handler(
          servicer.registerController,
          request_deserializer=topo__pb2.controller.FromString,
          response_serializer=topo__pb2.registerID.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'TopoService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
